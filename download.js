(function () {
    const processedZIndexes = new Set();
    let totalPages = parseInt(prompt("üìÑ Nh·∫≠p t·ªïng s·ªë trang trong Google Doc:", "10"));
    
    if (isNaN(totalPages) || totalPages <= 0) {
        alert("‚ùå S·ªë trang kh√¥ng h·ª£p l·ªá.");
        return;
    }

    // H√†m y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn th∆∞ m·ª•c (s·ª≠ d·ª•ng File System Access API)
    async function getDirectoryHandle() {
        const dirHandle = await window.showDirectoryPicker();
        return dirHandle;
    }

    // Y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn th∆∞ m·ª•c
    async function requestDirectoryAndDownload() {
        const directoryHandle = await getDirectoryHandle();

        function extractCanvasData() {
            const canvases = document.querySelectorAll('canvas.kix-canvas-tile-content');
            if (canvases.length === 0) {
                console.log('Kh√¥ng t√¨m th·∫•y canvas n√†o.');
                return false;
            }

            const pageTitle = document.title.replace(/[\\/:*?"<>|]/g, '_');
            const skippedZIndexes = [];
            let downloadedPages = [];

            canvases.forEach(async (canvas) => {
                const rawZ = parseInt(getComputedStyle(canvas).zIndex || "-1");
                const displayZ = rawZ + 1;

                if (isNaN(rawZ) || processedZIndexes.has(rawZ)) {
                    skippedZIndexes.push(displayZ);
                    return;
                }

                const dataURL = canvas.toDataURL("image/png");
                const fileName = `${pageTitle}_${displayZ}.png`;

                // Chuy·ªÉn ƒë·ªïi Base64 th√†nh blob
                const response = await fetch(dataURL);
                const blob = await response.blob();

                // L∆∞u file v√†o th∆∞ m·ª•c ƒë∆∞·ª£c ch·ªçn
                if (directoryHandle) {
                    const fileHandle = await directoryHandle.getFileHandle(fileName, { create: true });
                    const writableStream = await fileHandle.createWritable();
                    await writableStream.write(blob);
                    await writableStream.close();
                }

                processedZIndexes.add(rawZ);
                downloadedPages.push(displayZ);
            });

            if (skippedZIndexes.length > 0) {
                console.log(`‚ö†Ô∏è B·ªè qua Trang: ${[...new Set(skippedZIndexes)].join(', ')}`);
            }

            // Ki·ªÉm tra li·ªÅn m·∫°ch
            const missingZ = [];
            for (let i = 0; i < totalPages; i++) {
                if (!processedZIndexes.has(i)) {
                    missingZ.push(i + 1);
                }
            }

            // N·ªïi b·∫≠t log "Trang ƒëang ch·ªù" v·ªõi m√†u ƒëen
            if (missingZ.length > 0) {
                console.log(`%cüì• Trang ƒëang ch·ªù: ${missingZ.join(', ')}`, 'color: black; font-weight: bold; font-size: 14px;');
            }

            // G·ªôp l·∫°i "ƒê√£ t·∫£i xu·ªëng" th√†nh 1 d√≤ng
            if (downloadedPages.length > 0) {
                console.log(`üì∏ ƒê√£ t·∫£i xu·ªëng Trang: ${downloadedPages.join(', ')}`);
            }

            // N·∫øu ƒë·ªß trang v√† kh√¥ng thi·∫øu => d·ª´ng
            if (processedZIndexes.size >= totalPages && missingZ.length === 0) {
                console.log("‚úÖ ƒê√£ ho√†n t·∫•t t·∫£i t·∫•t c·∫£ trang!");
                return true;
            }

            return false;
        }

        function autoScroll() {
            window.scrollBy(0, window.innerHeight);
        }

        function startExtraction() {
            const done = extractCanvasData();
            if (!done) {
                autoScroll();
                setTimeout(startExtraction, 1000);  // Gi·∫£m th·ªùi gian delay xu·ªëng 1 gi√¢y
            }
        }

        startExtraction();
    }

    // B·∫Øt ƒë·∫ßu y√™u c·∫ßu th∆∞ m·ª•c v√† t·∫£i file
    requestDirectoryAndDownload();
})();
